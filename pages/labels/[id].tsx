import Head from "next/head";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faAdd,
  faAngleRight,
  faCheck,
  faClose,
  faSearch,
} from "@fortawesome/free-solid-svg-icons";
import TransactionCard from "../../components/TransactionCard";
import Button from "../../components/Button";
import { LineChart, XAxis, YAxis, Line, Tooltip } from "recharts";
import colors from "../../utils/colors";
import { useRouter } from "next/router";
import { useState, useEffect, useRef } from "react";
import {
  showGlobalLoader,
  hideGlobalLoader,
} from "../../components/GlobalLoader/loaderSlice";
import URLs, { API_BASE } from "../../utils/endpoints";
import { useAppDispatch, useAppSelector } from "../../utils/reduxHooks";
import { TransactionType, LabelType } from "../../utils/types";
import Input from "../../components/Input";
import { updateLabel as updateLabelGlobal } from "../../utils/labelThunk";

interface LabelStatsType {
  label: LabelType;
  recents: TransactionType[];
  daily: { day: number; spent: number; count: number }[];
  weekly: { week: number; spent: number; count: number }[];
  monthly: { month: number; spent: number; count: number }[];
  transactions: {
    today: { day: number; spent: number; count: number }[];
    this_week: { week: number; spent: number; count: number }[];
    this_month: { month: number; spent: number; count: number }[];
  };
}

function Label() {
  const router = useRouter();
  const dispatch = useAppDispatch();
  const token = useAppSelector((state) => state.auth.token);
  const [showCreator, setShowCreator] = useState(false);
  const newLabelNameRef = useRef<HTMLInputElement>(null);
  const newLabelDescRef = useRef<HTMLTextAreaElement>(null);
  const newLabelColorRef = useRef<HTMLInputElement>(null);

  const [labelStats, setLabelStats] = useState<LabelStatsType | null>(null);

  useEffect(() => {
    dispatch(showGlobalLoader());
    fetch(API_BASE + URLs.LABELS.STATS + "?label=" + router.query.id, {
      headers: {
        Authorization: "Token " + token,
      },
    })
      .then((res) => res.json())
      .then((res) => {
        res.data.daily.sort((d1: any, d2: any) => (d1.day > d2.day ? 1 : -1));
        res.data.weekly.sort((w1: any, w2: any) =>
          w1.week > w2.week ? 1 : -1
        );
        res.data.monthly.sort((m1: any, m2: any) =>
          m1.month > m2.month ? 1 : -1
        );
        dispatch(hideGlobalLoader());
        setLabelStats(res.data);
      });
  }, [token, dispatch]);
  const updateLabel = () => {
    if (labelStats)
      dispatch(
        updateLabelGlobal(
          labelStats?.label.id,
          {
            name: newLabelNameRef.current?.value,
            description: newLabelDescRef.current?.value,
            color: newLabelColorRef.current?.value,
          },
          (newLabel) => {
            setShowCreator(false);
            setLabelStats(
              (st) => ({ ...st, label: newLabel } as LabelStatsType)
            );
          }
        )
      );
  };
  return (
    labelStats && (
      <>
        <Head>
          <title>{labelStats.label.name}</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main>
          <div className="mainWrapper">
            <div className="title" onClick={() => setShowCreator(true)}>
              <div>
                <h1>{labelStats.label.name}</h1>
                <h3>{labelStats.label.description}</h3>
              </div>
            </div>
            <div className="primaryContainer">
              <div className="cardContainer">
                <div className="progressWrapper">
                  <div className="stats">
                    <div>
                      <span className="button-like">Spent today:</span>
                      <span className="value button-like">
                        $
                        {labelStats.transactions.today[0] &&
                          labelStats.transactions.today[0].spent}
                      </span>
                    </div>
                    <div>
                      <span className="button-like">spent this week:</span>
                      <span className="value button-like">
                        ${labelStats.transactions.this_week[0].spent}
                      </span>
                    </div>
                    <div>
                      <span className="button-like">spent this month:</span>
                      <span className="value button-like">
                        ${labelStats.transactions.this_month[0].spent}
                      </span>
                    </div>
                    <div>
                      <span className="button-like">
                        total transactions this month:
                      </span>
                      <span className="value button-like">
                        {labelStats.transactions.this_month[0].count}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
              <div className="search">
                <FontAwesomeIcon icon={faSearch} strokeWidth={1} />
                <input placeholder="Search..." />
              </div>
            </div>
          </div>
          <div className="section">
            <h2>Statistics</h2>
            <div className="cardGrid">
              <div>
                <h3>Spends in this week</h3>
                <LineChart
                  width={300}
                  height={200}
                  data={labelStats.daily}
                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                >
                  <XAxis dataKey="day" />
                  <YAxis />
                  <Tooltip
                    wrapperStyle={{ borderRadius: "8px" }}
                    contentStyle={{
                      background: "#000",
                      borderRadius: "16px",
                      border: "none",
                    }}
                  />
                  <Line
                    type="monotone"
                    dataKey="spent"
                    stroke={colors.primary}
                  />
                </LineChart>
              </div>

              <div>
                <h3>Spends in this month</h3>
                <LineChart
                  width={300}
                  height={200}
                  data={labelStats.weekly}
                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                >
                  <XAxis dataKey="week" />
                  <YAxis />
                  <Tooltip
                    wrapperStyle={{ borderRadius: "8px" }}
                    contentStyle={{
                      background: "#000",
                      borderRadius: "16px",
                      border: "none",
                    }}
                  />
                  <Line
                    type="monotone"
                    dataKey="spent"
                    stroke={colors.primary}
                  />
                </LineChart>
              </div>
              <div>
                <h3>Spends in this year</h3>
                <LineChart
                  width={300}
                  height={200}
                  data={labelStats.monthly}
                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                >
                  <XAxis dataKey="month" />
                  <YAxis />
                  <Tooltip
                    wrapperStyle={{ borderRadius: "8px" }}
                    contentStyle={{
                      background: "#000",
                      borderRadius: "16px",
                      border: "none",
                    }}
                  />
                  <Line
                    type="monotone"
                    dataKey="spent"
                    stroke={colors.primary}
                  />
                </LineChart>
              </div>
            </div>
            <div>
              <h2>Recent Transactions</h2>
              {labelStats.recents.length === 0 ? (
                <div className="no-data">
                  <span>
                    Seems like you haven&apos;t added any transactions yet.
                  </span>
                  <Button
                    startIcon={faAdd}
                    small
                    secondary
                    onClick={() => router.push("/add")}
                  >
                    Create one now!
                  </Button>
                </div>
              ) : (
                <div className="horizontalGrid">
                  <div className="horizontalGridWrapper">
                    {labelStats.recents.map((elem) => (
                      <TransactionCard data={elem} key={elem.id} />
                    ))}
                  </div>
                </div>
              )}
              <div style={{ float: "right" }}>
                <Button
                  secondary
                  small
                  endIcon={faAngleRight}
                  onClick={() =>
                    router.push("/transactions?labels=" + labelStats.label.id)
                  }
                >
                  View all
                </Button>
              </div>
            </div>
          </div>

          <div
            className="create"
            style={{ display: showCreator ? "block" : "none" }}
          >
            <div className="title">
              <h2>Update Label</h2>
              <FontAwesomeIcon
                icon={faClose}
                onClick={() => setShowCreator(false)}
              />
            </div>
            <h3>Name</h3>
            <Input
              ref={newLabelNameRef}
              defaultValue={labelStats.label.name}
              type="text"
              placeholder="Name"
            />
            <h3>Description</h3>
            <textarea
              placeholder="Description"
              rows={4}
              className="description"
              ref={newLabelDescRef}
              defaultValue={labelStats.label.description}
            />
            <h3>Pick a color for your label</h3>
            <Input
              type="color"
              ref={newLabelColorRef}
              defaultValue={labelStats.label.color}
            />
            <Button startIcon={faCheck} onClick={updateLabel}>
              Update
            </Button>
          </div>
        </main>
        <div style={{ width: "100vw", height: "72px" }} />

        <style jsx>
          {`
            main {
              padding: 12px;
            }

            .mainWrapper {
              width: 100%;
              align-items: center;
            }

            .mainWrapper .title,
            .mainWrapper .primaryContainer {
              flex-basis: 50%;
              justify-content: center;
              align-self: center;
            }

            .title div {
              text-align: center;
              width: 100%;
              display: flex;
              flex-direction: column;
              align-items: center;
              justify-content: center;
              padding: 12px 0;
            }

            .title h1,
            .title h3 {
              max-width: 350px;
              text-align: center;
              margin-top: 0;
              margin-bottom: 8px;
            }

            .title h1 {
              font-weight: 700;
              color: white;
              font-size: 4rem;
            }

            .title h3 {
              color: rgba(150, 150, 150, 0.8);
            }
            .title h1::before {
              content: "";
              background: ${labelStats.label.color};
              width: 24px;
              height: 24px;
              border-radius: 50%;
              display: inline-block;
              border: 2px solid white;
              transform: translateX(-48px);
              position: absolute;
              margin-top: 24px;
            }

            .primaryContainer {
              max-width: 500px;
              display: flex;
              flex-direction: column;
            }
            .cardContainer {
              padding: 16px;
              border-radius: 16px;
            }

            .progressWrapper {
              justify-content: space-between;
            }

            .search {
              width: 100%;
              padding: 0px 16px;
              border-radius: 12px;
              background: rgba(255, 255, 255, 0.05);
              margin-top: 8px;
            }

            .search input {
              margin-left: 8px;
              padding: 12px 8px;
              background: transparent;
              border: none;
              width: 80%;
              color: #fff8;
            }

            .search input:hover,
            .search input:focus {
              outline: none;
            }

            .search svg {
              stroke-width: 1px;
            }

            .mainWrapper,
            .progressWrapper {
              display: flex;
            }
            .progressWrapper {
              flex-direction: column;
              align-items: center;
              justify-content: center;
            }

            .cardGrid {
              display: flex;
              flex-wrap: wrap;
              width: 100%;
              justify-content: space-between;
            }

            .cardGrid h3 {
              text-align: center;
              font-size: 12px;
              text-transform: uppercase;
              font-weight: 900;
            }
            .stats {
              width: 100%;
              margin-top: 32px;
            }
            .button-like {
              text-transform: uppercase;
              letter-spacing: 1px;
              font-weight: 900;
              font-size: 12px;
            }

            .value {
              color: rgba(255, 255, 255, 0.7);
              float: right;
            }

            .horizontalGrid {
              max-width: 100vw;
              overflow-x: auto;
            }
            .horizontalGridWrapper {
              width: max-content;
              display: flex;
            }
            h2 {
              margin-left: 12px;
            }

            .no-data {
              width: 100%;
              height: 150px;
              display: flex;
              align-items: center;
              justify-content: center;
              flex-direction: column;
              text-align: center;
              color: rgba(228, 228, 228, 0.8);
            }

            .create {
              position: fixed;
              top: 0;
              right: 0;
              height: 100vh;
              width: 350px;
              background-color: rgba(0, 0, 0, 0.9);
              background-image: linear-gradient(
                rgba(255, 255, 255, 0.1),
                rgba(255, 255, 255, 0.1)
              );
              backdrop-filter: blur(8px);
              padding: 24px 32px;
              border-radius: 12px 0 0 12px;
              animation: slide-from-right 0.3s ease-out forwards;
            }

            .create > .title {
              display: flex;
              width: 100%;
              align-items: center;
              justify-content: space-between;
            }

            .title > :global(svg) {
              width: 24px;
              height: 24px;
              cursor: pointer;
            }

            .create > :global(input),
            .create > :global(button),
            .description {
              width: 100%;
              margin: 12px 0;
            }

            .create h3 {
              font-size: 12px;
              text-transform: uppercase;
              letter-spacing: 1px;
              font-family: "Roboto";
              font-weight: 700;
              margin-top: 12px;
              margin-bottom: 0px;
            }

            .description {
              background: rgba(255, 255, 255, 0.1);
              border: none;
              border-radius: 8px;
              color: white;
              padding: 12px;
              margin-top: 12px;
            }

            .description:focus {
              outline: none;
            }

            @keyframes slide-from-right {
              from {
                transform: translateX(100%);
              }
              90% {
                transform: translateX(-5%);
              }
              to {
                transform: translateX(0);
              }
            }
            @keyframes slide-from-bottom {
              from {
                transform: translateY(100%);
              }
              90% {
                transform: translateY(-5%);
              }
              to {
                transform: translateY(0);
              }
            }

            @media (max-width: 850px) {
              .mainWrapper {
                flex-direction: column;
              }
            }

            @media (max-width: 500px) {
              .mainWrapper {
                margin-top: 32px;
              }
              .create {
                width: 100vw;
                height: fit-content;
                top: auto;
                bottom: 0;
                border-radius: 12px 12px 0 0;
                padding-bottom: 84px;
                animation: slide-from-bottom 0.3s ease-out forwards;
              }
              .progressWrapper > :global(.progressContainer) {
                margin: 6px;
              }

              :global(.progressBar) {
                width: 30px !important;
                border-radius: 8px !important;
              }
              :global(.progressElement) {
                width: 24px !important;
                border-radius: 6px !important;
              }
              .cardContainer {
                padding: 8px;
                border-radius: 8px;
              }
              h1 {
                font-size: 3rem !important;
              }
            }
          `}
        </style>
      </>
    )
  );
}

export default Label;
